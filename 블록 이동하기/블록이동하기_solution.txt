N = > 보드 한 변의 길이

drdc => 방향 벡터
(행, 열)
(1, 0) -> 하
(-1, 0) -> 상
(0, 1) -> 우
(0, -1) -> 좌

queue에는 (행1, 열1, 방향, 이동 횟수)
visited를 set으로 사용하는 이유? 중복되는 위치 값을 넣지 않게 하기 위함.
로봇 방향까지 추가해야하는 이유? 행1, 열1은 고정한채 행2, 열2만 이동하는 것을 알기 위함.

queue가 빌 때 까지
    queue에 있는 정보들을 pop하여 각각 행1, 열1, 로봇의 방향, 이동 횟수에 할당.
    r2는 행2, c2는 열2 why? -> 로봇이 2x1 형태이기 때문.

    만약 r2와 c2가 4,4에 있다면 도착한 것이므로
        return 이동횟수

    # 이동 경로 정하기
    (next row1/ next col1/ next row2/ next col2)
    nr1 = r1에 하/우/상/좌의 0번 인덱스 값을 더함
    nc1 = c1에 하/우/상/좌의 1번 인덱스 값을 더함
    nr2 = r2에 하/우/상/좌의 0번 인덱스 값을 더함
    nc2 = c2에 하/우/상/좌의 1번 인덱스 값을 더함

        # 보드 벗어 나면 안됨!
        만약 밖을 벗어나지 않는다면:
            만약 다음 nr1과 nc1과 로봇의 방향이 visited에 있거나 "1" 즉, 갈 수 없는 곳이라면:
                아래 코드를 실행하지 않고 for문으로 다시 돌아감.
        
            queue에 nr1, nc1, 로봇 방향, 이동 횟수 + 1을 추가시킴.
            visited에도 nr1, nc1, 로봇 방향을 추가시킴
        
            회전된 로봇의 방향은 로봇 = 방향에 ^ 1을 하여 0은 1로, 1은 0을 할당.

            만약 로봇의 방향 + d(0 -> 하, 1 -> 우, 2 -> 상, 3 -> 좌) == 1이라면:
            => 로봇이 오른쪽 방향 or 아래쪽 방향으로 이동하는 것.
                만약 r1, c1, 회전된 로봇의 방향이 visited한 경로가 아닌 경우:
                    queue에 r1, c1, 회전된 로봇의 방향, 이동 횟수 +1을 추가.
                    visited에 r1, c1, 회전된 로봇의 방향을 추가.
                만약 r2, c2, 회전된 로봇의 방향이 visiste한 경로가 아닌 경우:
                    queue에 r2, c2, 회전된 로봇의 방향, 이동 횟수 +1을 추가.
                    visisted에 r2, c2, 회전된 로봇의 방향을 추가.
            만약 로봇의 방향 + d(0 -> 하, 1 -> 상, 2 -> 우, 3 -> 좌) == 3이라면:
            => 로봇이 왼쪽 방향 or 위쪽 방향으로 이동
                만약 r1, c1, 회전된 로봇의 방향이 visited한 경로가 아닌 경우:
                    queue에 r1, c1, 회전된 로봇의 방향, 이동 횟수 +1을 추가.
                    visited에 r1, c1, 회전된 로봇의 방향을 추가.
                만약 r2, c2, 회전된 로봇의 방향이 visiste한 경로가 아닌 경우:
                    queue에 r2, c2, 회전된 로봇의 방향, 이동 횟수 +1을 추가.
                    visisted에 r2, c2, 회전된 로봇의 방향을 추가.

    